<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swifter.Json</name>
    </assembly>
    <members>
        <member name="T:Swifter.Json.HGlobalChars">
            <summary>
            提供字符串的缓存
            </summary>
        </member>
        <member name="P:Swifter.Json.HGlobalChars.ThreadInstance">
            <summary>
            当前线程的实例
            </summary>
        </member>
        <member name="F:Swifter.Json.HGlobalChars.chars">
            <summary>
            全局字符串内存地址
            </summary>
        </member>
        <member name="F:Swifter.Json.HGlobalChars.count">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="M:Swifter.Json.HGlobalChars.Finalize">
            <summary>
            释放全局内存。
            </summary>
        </member>
        <member name="M:Swifter.Json.HGlobalChars.Expand(System.Int32)">
            <summary>
            扩展字符串长度。
            </summary>
            <param name="expandMinSize">最小扩展长度</param>
        </member>
        <member name="T:Swifter.Json.JsonDeserializeException">
            <summary>
            Json 反序列化出错时的异常信息。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonDeserializeException.Line">
            <summary>
            反序列化出错所在行。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonDeserializeException.Column">
            <summary>
            反序列化出错所在列。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonDeserializeException.Index">
            <summary>
            反序列化出错所在索引。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonDeserializeException.Text">
            <summary>
            导致反序列化出错的文本。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonDeserializeException.Message">
            <summary>
            获取异常消息。
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonFormatter">
            <summary>
            JSON 文档格式化器。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.DefaultMaxDepth">
            <summary>
            读取或设置默认最大结构深度。
            此值只在序列化时有效。
            可以通过枚举 JsonFormatterOptions 来配置序列化 (Serialize) 时结构深度超出该值时选择抛出异常还是不解析超出部分。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.DefaultIndentedChars">
            <summary>
            读取或设置默认缩进符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.DefaultLineBreak">
            <summary>
            读取或设置默认换行符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.DefaultMiddleChars">
            <summary>
            读取或设置默认 Key 与 Value 之间的分隔符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.String,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 JSON 字符串反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="text">JSON 字符串</param>
            <param name="options">反序列化配置项</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.TextReader,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 JSON 字符串读取器的内容反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="textReader">JSON 字符串读取器</param>
            <param name="options">反序列化配置项</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.String,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 JSON 字符串反序列化为指定类型的值。
            </summary>
            <param name="text">JSON 字符串</param>
            <param name="type">指定类型</param>
            <param name="options">反序列化配置项</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.TextReader,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 JSON 字符串读取器的内容反序列化为指定类型的值。
            </summary>
            <param name="textReader">JSON 字符串读取器</param>
            <param name="type">指定类型</param>
            <param name="options">反序列化配置项</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0)">
            <summary>
            将指定类型的实例序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <returns>返回 JSON 字符串</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.TextWriter)">
            <summary>
            将指定类型的实例序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">JSON 字符串写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="options">序列化配置</param>
            <returns>返回 JSON 字符串</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.TextWriter,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">JSON 字符串写入器</param>
            <param name="options">序列化配置</param>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.MaxDepth">
            <summary>
            读取或设置最大结构深度。
            此值只在序列化时有效。
            可以通过枚举 JsonFormatterOptions 来配置序列化 (Serialize) 时结构深度超出该值时选择抛出异常还是不解析超出部分。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.IndentedChars">
            <summary>
            读取或设置缩进符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.LineBreak">
            <summary>
            读取或设置换行符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.MiddleChars">
            <summary>
            读取或设置默认 Key 与 Value 之间的分隔符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.Options">
            <summary>
            JSON 格式化器配置项。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.#ctor">
            <summary>
            初始化具有默认配置的 JSON 格式化器。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.#ctor(Swifter.Json.JsonFormatterOptions)">
            <summary>
            初始化指定配置的 JSON 格式化器。
            </summary>
            <param name="options">指定配置</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.String)">
            <summary>
            将 JSON 字符串反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="text">JSON 字符串</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.IO.TextReader)">
            <summary>
            将 JSON 字符串读取器的内容反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="textReader">JSON 字符串读取器</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.String,System.Type)">
            <summary>
            将 JSON 字符串反序列化为指定类型的值。
            </summary>
            <param name="text">JSON 字符串</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            将 JSON 字符串读取器的内容反序列化为指定类型的值。
            </summary>
            <param name="textReader">JSON 字符串读取器</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0)">
            <summary>
            将指定类型的实例序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <returns>返回 JSON 字符串</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,System.IO.TextWriter)">
            <summary>
            将指定类型的实例序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">JSON 字符串写入器</param>
        </member>
        <member name="T:Swifter.Json.JsonFormatterOptions">
            <summary>
            JSON 格式化器配置项。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.Default">
            <summary>
            默认配置项
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingNone">
            <summary>
            序列化时不考虑对象多引用关系
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingNull">
            <summary>
            序列化时跳过已序列化的对象，使用 Null 表示。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingReference">
            <summary>
            允许使用 ref_xxx 写法表示对象多引用。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.Indented">
            <summary>
            序列化时对 JSON 进行缩进美化。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.OutOfDepthException">
            <summary>
            超出深度时抛出异常，否则将跳过超出部分。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreNull">
            <summary>
            启用筛选并筛选掉 Null 值
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreZero">
            <summary>
            启用筛选并筛选掉 0 值
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.ArrayOnFilter">
            <summary>
            数组元素启用筛选
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonOutOfDepthException">
            <summary>
            JSON 序列化时结构深度超出最大深度的异常。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonOutOfDepthException.#ctor">
            <summary>
            初始化实例
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonSerializer.isInArray">
            <summary>
            True: In Array, False: In Object.
            </summary>
        </member>
    </members>
</doc>
