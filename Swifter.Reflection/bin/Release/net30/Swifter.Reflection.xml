<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swifter.Reflection</name>
    </assembly>
    <members>
        <member name="T:Swifter.Reflection.XBindingFlags">
            <summary>
            创建 XTypeInfo 或 XObjectRW 时指示要获取成员的标识。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.None">
            <summary>
            没有任何标识，通常表示使用默认标识。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Field">
            <summary>
            表示要获取类型的字段。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Property">
            <summary>
            表示要获取类型的属性。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Method">
            <summary>
            表示要获取类型的方法。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Indexer">
            <summary>
            表示要获取类型的索引器。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Public">
            <summary>
            表示要获取类型的公开成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.NonPublic">
            <summary>
            表示要获取类型的非公开成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Static">
            <summary>
            表示要获取类型的静态成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Instance">
            <summary>
            表示要获取类型的实例成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWCannotSetException">
            <summary>
            表示当属性或索引器调用 set 方法失败时是否抛出异常。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWCannotGetException">
            <summary>
            表示当属性或索引器调用 get 方法失败时是否抛出异常。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWIgnoreCase">
            <summary>
            表示数据读取器的成员名称匹配是否区分大小写。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWNoFoundException">
            <summary>
            表示数据读取器的成员名称无匹配时是否抛出异常。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.SkipDefaultValue">
            <summary>
            在 OnReadAll 中跳过具有类型默认值的成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Default">
            <summary>
            XTypeInfo 创建时默认的标识。
            </summary>
        </member>
        <member name="T:Swifter.Reflection.XFieldInfo">
            <summary>
            XFieldInfo 字段信息。
            此 XFieldInfo 的提供读写方法比 .Net 自带的 FieldInfo 快很多。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.Create(System.Reflection.FieldInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XFieldInfo 字段信息。
            </summary>
            <param name="fieldInfo">.Net 自带的 FieldInfo 字段信息。</param>
            <param name="flags">绑定标识</param>
            <returns>返回一个 XFieldInfo 字段信息。</returns>
        </member>
        <member name="P:Swifter.Reflection.XFieldInfo.FieldInfo">
            <summary>
            获取 .Net 自带的 FieldInfo 字段信息。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XFieldInfo.Name">
            <summary>
            获取此字段的名称。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.GetValue(System.Object)">
            <summary>
            获取该字段的值。
            </summary>
            <param name="obj">类型的实例。如果该字段时静态的，则指定为 Null</param>
            <returns>返回该字段的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置该字段的值。
            </summary>
            <param name="obj">类型的实例。如果该字段时静态的，则指定为 Null</param>
            <param name="value">该字段的值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.GetValue(System.TypedReference)">
            <summary>
            获取该字段的值。
            </summary>
            <param name="typedRef">类型的实例的引用。如果该字段时静态的，则指定为 Null</param>
            <returns>返回该字段的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.SetValue(System.TypedReference,System.Object)">
            <summary>
            设置该字段的值。
            </summary>
            <param name="typedRef">类型的实例的引用。如果该字段时静态的，则指定为 Null</param>
            <param name="value">返回该字段的值</param>
        </member>
        <member name="T:Swifter.Reflection.XFieldValueRW">
            <summary>
            提供 XObjectRW 的字段读写器。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.DirectRead">
            <summary>
            直接读取值。
            </summary>
            <returns>值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.DirectWrite(System.Object)">
            <summary>
            直接写入值。
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.GetBasicType">
            <summary>
            获取该字段类型的 BasicTypes 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadArray(Swifter.Writers.IDataWriter{System.Int32})">
            <summary>
            读取一个数组结构。
            </summary>
            <param name="valueWriter">数组结构写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadBoolean">
            <summary>
            读取一个 Boolean 值。
            </summary>
            <returns>返回 bool 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadByte">
            <summary>
            读取一个 Byte 值。
            </summary>
            <returns>返回 byte 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadChar">
            <summary>
            读取一个 Char 值。
            </summary>
            <returns>返回 char 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadDateTime">
            <summary>
            读取一个 DateTime 值。
            </summary>
            <returns>返回 DateTime 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadDecimal">
            <summary>
            读取一个 Decimal 值。
            </summary>
            <returns>返回 decimal 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadDouble">
            <summary>
            读取一个 Double 值。
            </summary>
            <returns>返回 double 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt16">
            <summary>
            读取一个 Int16 值。
            </summary>
            <returns>返回 short 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt32">
            <summary>
            读取一个 Int32 值。
            </summary>
            <returns>返回 int 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt64">
            <summary>
            读取一个 Int64 值。
            </summary>
            <returns>返回 long 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadObject(Swifter.Writers.IDataWriter{System.String})">
            <summary>
            读取一个对象结构数据。
            </summary>
            <param name="valueWriter">对象结构数据写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadSByte">
            <summary>
            读取一个 SByte 值。
            </summary>
            <returns>返回 sbyte 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadSingle">
            <summary>
            读取一个 Single 值。
            </summary>
            <returns>返回 float 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadString">
            <summary>
            读取一个 String 值。
            </summary>
            <returns>返回 string 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt16">
            <summary>
            读取一个 UInt16 值。
            </summary>
            <returns>返回 ushort 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt32">
            <summary>
            读取一个 UInt32 值。
            </summary>
            <returns>返回 uint 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt64">
            <summary>
            读取一个 UInt64 值。
            </summary>
            <returns>返回 ulong 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteArray(Swifter.Readers.IDataReader{System.Int32})">
            <summary>
            写入一个数组结构数据。
            </summary>
            <param name="dataReader">数组结构数据读取器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteBoolean(System.Boolean)">
            <summary>
            写入一个 Boolean 值。
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteByte(System.Byte)">
            <summary>
            写入一个 Byte 值。
            </summary>
            <param name="value">byte 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteChar(System.Char)">
            <summary>
            写入一个 Char 值。
            </summary>
            <param name="value">char 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteDateTime(System.DateTime)">
            <summary>
            写入一个 DateTime 值。
            </summary>
            <param name="value">DateTime 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteDecimal(System.Decimal)">
            <summary>
            写入一个 Decimal 值。
            </summary>
            <param name="value">decimal 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteDouble(System.Double)">
            <summary>
            写入一个 Double 值。
            </summary>
            <param name="value">double 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt16(System.Int16)">
            <summary>
            写入一个 Int16 值。
            </summary>
            <param name="value">short 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt32(System.Int32)">
            <summary>
            写入一个 Int32 值。
            </summary>
            <param name="value">int 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt64(System.Int64)">
            <summary>
            写入一个 Int64 值。
            </summary>
            <param name="value">long 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteObject(Swifter.Readers.IDataReader{System.String})">
            <summary>
            写入一个对象结构数据。
            </summary>
            <param name="dataReader">对象结构数据读取器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteSByte(System.SByte)">
            <summary>
            写入一个 SByte 值。
            </summary>
            <param name="value">sbyte 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteSingle(System.Single)">
            <summary>
            写入一个 Single 值。
            </summary>
            <param name="value">float 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteString(System.String)">
            <summary>
            写入一个 String 值。
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt16(System.UInt16)">
            <summary>
            写入一个 UInt16 值。
            </summary>
            <param name="value">ushort 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt32(System.UInt32)">
            <summary>
            写入一个 UInt32 值。
            </summary>
            <param name="value">uint 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt64(System.UInt64)">
            <summary>
            写入一个 UInt64 值。
            </summary>
            <param name="value">ulong 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ToString">
            <summary>
            获取字段或属性读写器的名称。
            </summary>
            <returns>返回一个名称</returns>
        </member>
        <member name="T:Swifter.Reflection.XFieldValueRW`1">
            <summary>
            提供 XObjectRW 的字段读写器。
            </summary>
            <typeparam name="T">字段类型</typeparam>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW`1.ReadValue">
            <summary>
            直接读取值。
            </summary>
            <returns>值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW`1.WriteValue(`0)">
            <summary>
            直接设置值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Swifter.Reflection.XIndexerInfo">
            <summary>
            XIndexerInfo 索引器信息。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.Create(System.Reflection.PropertyInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建索引器信息。
            </summary>
            <param name="propertyInfo">.Net 自带的索引器信息</param>
            <param name="flags">绑定标识</param>
            <returns>返回 XIndexerInfo 索引器信息</returns>
        </member>
        <member name="P:Swifter.Reflection.XIndexerInfo.PropertyInfo">
            <summary>
            获取 .Net 自带的索引器信息。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XIndexerInfo.GetValueDelegate">
            <summary>
            获取该索引器的 get 方法的委托。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XIndexerInfo.SetValueDelegate">
            <summary>
            获取该索引器的 set 方法的委托。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.GetValue(System.Object,System.Object[])">
            <summary>
            获取该索引器指定参数的值。
            </summary>
            <param name="obj">类型的实例。如果该索引器是静态的，则指定为 Null</param>
            <param name="parameters">索引器的参数</param>
            <returns>返回该值</returns>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.GetValue(System.TypedReference,System.Object[])">
            <summary>
            获取该索引器指定参数的值。
            </summary>
            <param name="typedRef">类型的实例的引用。如果该索引器是静态的，则指定为 Null</param>
            <param name="parameters">索引器的参数</param>
            <returns>返回该值</returns>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.GetValue(System.Object[])">
            <summary>
            获取静态索引器指定参数的值。
            </summary>
            <param name="parameters">索引器的参数</param>
            <returns>返回该值</returns>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            设置该索引器指定参数的值。
            </summary>
            <param name="obj">类型的实例。如果该索引器是静态的，则指定为 Null</param>
            <param name="parameters">索引器的参数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.SetValue(System.TypedReference,System.Object[],System.Object)">
            <summary>
            设置该索引器指定参数的值。
            </summary>
            <param name="typedRef">类型的实例的引用。如果该索引器是静态的，则指定为 Null</param>
            <param name="parameters">索引器的参数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.SetValue(System.Object[],System.Object)">
            <summary>
            设置静态索引器指定参数的值。
            </summary>
            <param name="parameters">索引器的参数</param>
            <param name="value">值</param>
        </member>
        <member name="T:Swifter.Reflection.XMethodInfo">
            <summary>
            XMethodInfo 方法信息。
            此方法提供的动态调用都比 .Net 自带的要快很多。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XMethodInfo.Create(System.Reflection.MethodInfo,Swifter.Reflection.XBindingFlags)">
            <summary>T
            创建 XMethodInfo 方法信息。
            </summary>
            <param name="methodInfo">.Net 自带 MethodInfo 方法信息</param>
            <param name="flags">绑定标识</param>
            <returns>返回一个 XMethodInfo 方法信息。</returns>
        </member>
        <member name="P:Swifter.Reflection.XMethodInfo.MethodInfo">
            <summary>
            获取 .Net 自带的 MethodInfo 方法信息。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XMethodInfo.Delegate">
            <summary>
            获取该方法的委托。
            该委托比普通的委托占用更大的内存，但动态执行的效率更高。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XMethodInfo.Invoke(System.Object,System.Object[])">
            <summary>
            动态执行该方法。
            </summary>
            <param name="obj">类型的实例。如果是静态方法，则指定为 Null</param>
            <param name="parameters">方法的参数</param>
            <returns>返回该方法的返回值。如果返回值类型为 Void，则返回 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XMethodInfo.Invoke(System.TypedReference,System.Object[])">
            <summary>
            动态执行该方法。
            </summary>
            <param name="typedRef">类型的实例的引用。如果是静态方法，则指定为 Null</param>
            <param name="parameters">方法的参数</param>
            <returns>返回该方法的返回值。如果返回值类型为 Void，则返回 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XMethodInfo.Invoke(System.Object[])">
            <summary>
            动态执行该静态方法。
            </summary>
            <param name="parameters">方法的参数</param>
            <returns>返回该方法的返回值。如果返回值类型为 Void，则返回 Null</returns>
        </member>
        <member name="T:Swifter.Reflection.XObjectInterface`1">
            <summary>
            提供 XObjectRW 的读写接口。
            Swifter 默认的对象读写器是 FastObjectRW.
            FastObjectRW 对比 XObjectRW：
                FastObjectRW 的优势是：效率几乎完美，内存占用也不是很大。
                XObjectRW 的优势是：内存占用非常小，效率也不错，可以调用非共有成员。
            如果要改为使用 XObjectRW，在程序初始化代码中添加 Swifter.RW.ValueInterface.DefaultObjectInterfaceType = typeof(Swifter.Reflection.XObjectInterface&lt;T&gt;);
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Swifter.Reflection.XObjectInterface`1.ReadValue(Swifter.Readers.IValueReader)">
            <summary>
            在值读取器中读取该类型的实例。
            </summary>
            <param name="valueReader">值读取器</param>
            <returns>返回该类型的实例</returns>
        </member>
        <member name="M:Swifter.Reflection.XObjectInterface`1.WriteValue(Swifter.Writers.IValueWriter,`0)">
            <summary>
            在数据写入器中写入该类型的实例。
            </summary>
            <param name="valueWriter">值写入器</param>
            <param name="value">该类型的实例</param>
        </member>
        <member name="T:Swifter.Reflection.XObjectRW">
            <summary>
            XObjectRW 一个强大，高效，内存小的对象读写器。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.DefaultBindingFlags">
            <summary>
            读取或设置默认的绑定标识。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnReadValue(System.String,Swifter.Writers.IValueWriter)">
            <summary>
            将指定成员名称的值写入到值写入器中。
            </summary>
            <param name="key">成员的名称</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnReadAll(Swifter.Writers.IDataWriter{System.String})">
            <summary>
            将数据源中的所有成员的名称和值写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnReadAll(Swifter.Writers.IDataWriter{System.String},Swifter.Readers.IValueFilter{System.String})">
            <summary>
            对数据源中的原有成员的名称和值进行筛选，并将满足筛选的结果写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
            <param name="valueFilter">值筛选器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnWriteValue(System.String,Swifter.Readers.IValueReader)">
            <summary>
            将数据读取器中的值设置到指定名称的成员中。
            </summary>
            <param name="key">成员的名称</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.Initialize">
            <summary>
            调用默认构造函数初始化数据源对象。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.Initialize(System.Int32)">
            <summary>
            调用默认构造函数初始化数据源对象。
            </summary>
            <param name="capacity">不处理此参数</param>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Keys">
            <summary>
            获取该对象读写器的成员名称集合。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Count">
            <summary>
            获取该对象读写器的成员名称的数量
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.ObjectId">
            <summary>
            获取该数据源对象的 Id。如果时值类型或 Null，则返回 0。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Type">
            <summary>
            获取数据源的类型。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Item(System.String)">
            <summary>
            获取指定成员名称的成员值的读写器。
            </summary>
            <param name="key">成员名称</param>
            <returns>返回值的读写器</returns>
        </member>
        <member name="T:Swifter.Reflection.XObjectRW`1">
            <summary>
            XObjectRW 一个强大，高效，内存小的对象读写器。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW`1.BindingFlags">
            <summary>
            读取或设置默认的绑定标识。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW`1.Content">
            <summary>
            获取或设置该读写器的数据源对象。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW`1.Create(Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XObjectRW 对象读写器。
            </summary>
            <param name="flags">绑定标识</param>
            <returns>返回 XObjectRW 对象读写器</returns>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW`1.Initialize(`0)">
            <summary>
            设置数据源对象。
            </summary>
            <param name="obj">数据源对象</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW`1.Initialize">
            <summary>
            初始化数据源。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW`1.ToString">
            <summary>
            获取 XObjectRW 的名称。
            </summary>
            <returns>返回 XObjectRW 的名称</returns>
        </member>
        <member name="T:Swifter.Reflection.XPropertyInfo">
            <summary>
            XPropertyInfo 属性信息。
            此属性信息提供的读写方法比 .Net 自带的 PropertyInfo 属性信息快很多。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.Create(System.Reflection.PropertyInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XPropertyInfo 属性信息。
            </summary>
            <param name="propertyInfo">.Net 自带的 PropertyInfo 属性</param>
            <param name="flags">绑定标识</param>
            <returns>返回 XPropertyInfo 属性信息。</returns>
        </member>
        <member name="P:Swifter.Reflection.XPropertyInfo.PropertyInfo">
            <summary>
            获取 .Net 自带的 PropertyInfo 属性
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XPropertyInfo.Name">
            <summary>
            获取此属性的名称。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.GetValue(System.Object)">
            <summary>
            获取该属性的值。
            </summary>
            <param name="obj">类型的实例。如果该属性是静态的，则指定为 Null</param>
            <returns>返回该属性的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置该属性的值。
            </summary>
            <param name="obj">类型的实例。如果该属性是静态的，则指定为 Null</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.GetValue(System.TypedReference)">
            <summary>
            获取该属性的值。
            </summary>
            <param name="typedRef">类型的实例的引用。如果该属性是静态的，则指定为 Null</param>
            <returns>返回该属性的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.SetValue(System.TypedReference,System.Object)">
            <summary>
            设置该属性的值。
            </summary>
            <param name="typedRef">类型的实例的引用。如果该属性是静态的，则指定为 Null</param>
            <param name="value">值</param>
        </member>
        <member name="T:Swifter.Reflection.XTypeInfo">
            <summary>
            XTypeInfo 类型信息。
            此类型信息主要提供该类型的成员的缓存。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.Create(System.Type,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XTypeInfo 类型信息。
            </summary>
            <param name="type">需要创建 XTypeInfo 类型信息的类型。</param>
            <param name="flags">绑定参数</param>
            <returns>返回一个 XTypeInfo 类型信息。</returns>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Fields">
            <summary>
            获取所有字段的集合。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Properties">
            <summary>
            获取所有属性的集合。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Indexers">
            <summary>
            获取所有索引器的集合
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Methods">
            <summary>
            获取所有方法的集合。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Type">
            <summary>
            获取表示当前 XTypeInfo 的类型。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Flags">
            <summary>
            获取创建 XTypeInfo 的绑定标识。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetField(System.String)">
            <summary>
            获取指定名称的字段。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回字段信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetProperty(System.String)">
            <summary>
            获取指定名称的属性。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回属性信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetIndexer(System.Type[])">
            <summary>
            获取指定参数类型的索引器。
            </summary>
            <param name="parameters">指定参数类型</param>
            <returns>返回索引器信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetIndexer(System.Object[])">
            <summary>
            获取指定参数的索引器。
            </summary>
            <param name="parameters">指定参数</param>
            <returns>返回索引器信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetMethod(System.String,System.Type[])">
            <summary>
            获取指定名称和参数类型的方法信息。
            </summary>
            <param name="name">方法名称</param>
            <param name="parameters">方法参数类型</param>
            <returns>返回方法信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetMethod(System.String,System.Object[])">
            <summary>
            获取指定名称和参数的方法信息。
            </summary>
            <param name="name">方法名称</param>
            <param name="parameters">方法参数</param>
            <returns>返回方法信息或 Null</returns>
        </member>
    </members>
</doc>
